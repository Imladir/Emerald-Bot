// <auto-generated />
using System;
using EmeraldBot.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmeraldBot.Model.Migrations
{
    [DbContext(typeof(EmeraldBotContext))]
    partial class EmeraldBotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview6.19304.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmeraldBot.Model.Characters.CharacterCondition", b =>
                {
                    b.Property<int>("CharacterID");

                    b.Property<int>("ConditionID");

                    b.HasKey("CharacterID", "ConditionID");

                    b.HasIndex("ConditionID");

                    b.ToTable("CharacterConditions");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.CharacterRing", b =>
                {
                    b.Property<int>("CharacterID");

                    b.Property<int>("RingID");

                    b.Property<int>("Value");

                    b.HasKey("CharacterID", "RingID");

                    b.HasIndex("RingID");

                    b.ToTable("CharacterRings");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.Demeanor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Unmasking")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Demeanors");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.JournalEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime>("EntryDate");

                    b.Property<int>("JournalID");

                    b.Property<int?>("PCID");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.HasKey("ID");

                    b.HasIndex("JournalID");

                    b.HasIndex("PCID");

                    b.ToTable("JournalEntry");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.JournalType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("JournalTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.NPCSkillGroup", b =>
                {
                    b.Property<int>("NPCID");

                    b.Property<int>("SkillGroupID");

                    b.Property<int>("Value");

                    b.HasKey("NPCID", "SkillGroupID");

                    b.HasIndex("SkillGroupID");

                    b.ToTable("CharacterSkillGroups");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.NPCType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("NPCTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCAdvantage", b =>
                {
                    b.Property<int>("CharacterID");

                    b.Property<int>("AdvantageID");

                    b.Property<int?>("PCID");

                    b.HasKey("CharacterID", "AdvantageID");

                    b.HasIndex("AdvantageID");

                    b.HasIndex("PCID");

                    b.ToTable("PCAdvantage");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCSkill", b =>
                {
                    b.Property<int>("PCID");

                    b.Property<int>("SkillID");

                    b.Property<int>("Value");

                    b.HasKey("PCID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCTechnique", b =>
                {
                    b.Property<int>("CharacterID");

                    b.Property<int>("TechniqueID");

                    b.Property<int?>("PCID");

                    b.HasKey("CharacterID", "TechniqueID");

                    b.HasIndex("PCID");

                    b.HasIndex("TechniqueID");

                    b.ToTable("PCTechnique");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Action", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Activation")
                        .HasMaxLength(1024);

                    b.Property<string>("Description")
                        .HasMaxLength(512);

                    b.Property<string>("Effect")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ActionScenes", b =>
                {
                    b.Property<int>("ActionID");

                    b.Property<int>("SceneTypeID");

                    b.HasKey("ActionID", "SceneTypeID");

                    b.HasIndex("SceneTypeID");

                    b.ToTable("ActionScenes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ActionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ActionTypeAction", b =>
                {
                    b.Property<int>("ActionTypeID");

                    b.Property<int>("ActionID");

                    b.HasKey("ActionTypeID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("ActionTypeAction");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.AdvantageClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("AdvantageClasses");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.AdvantageType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("AdvantageTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.AdvantageTypeAdvantages", b =>
                {
                    b.Property<int>("AdvantageTypeID");

                    b.Property<int>("AdvantageID");

                    b.HasKey("AdvantageTypeID", "AdvantageID");

                    b.HasIndex("AdvantageID");

                    b.ToTable("AdvantageTypeAdvantages");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Clan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Colour");

                    b.Property<string>("Icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ConflictAction", b =>
                {
                    b.Property<int>("ConflictID");

                    b.Property<int>("ActionID");

                    b.HasKey("ConflictID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("ConflictAction");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ConflictType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("ConflictTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.GearQualitiesGear", b =>
                {
                    b.Property<int>("GearID");

                    b.Property<int>("GearQualityID");

                    b.HasKey("GearID", "GearQualityID");

                    b.HasIndex("GearQualityID");

                    b.ToTable("GearQualitiesGear");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.GearQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("SourceID");

                    b.HasKey("ID");

                    b.HasIndex("SourceID");

                    b.ToTable("GearQuality");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Opportunity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<int?>("RingID");

                    b.Property<int>("ServerID");

                    b.Property<int?>("SourceID");

                    b.Property<bool>("Variable");

                    b.HasKey("ID");

                    b.HasIndex("RingID");

                    b.HasIndex("ServerID");

                    b.HasIndex("SourceID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.OpportunityTrigger", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActionID");

                    b.Property<int>("RingID");

                    b.Property<int?>("SceneTypeID");

                    b.Property<int?>("SkillGroupID");

                    b.Property<int?>("TechniqueID");

                    b.Property<int?>("TechniqueTypeID");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("RingID");

                    b.HasIndex("SceneTypeID");

                    b.HasIndex("SkillGroupID");

                    b.HasIndex("TechniqueID");

                    b.HasIndex("TechniqueTypeID");

                    b.ToTable("OpportunityTriggers");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.OpportunityTriggerOpportunity", b =>
                {
                    b.Property<int>("OpportunityID");

                    b.Property<int>("OpportunityTriggerID");

                    b.HasKey("OpportunityID", "OpportunityTriggerID");

                    b.HasIndex("OpportunityTriggerID");

                    b.ToTable("OpportunityTriggerOpportunity");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Ring", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(16);

                    b.HasKey("ID");

                    b.ToTable("Rings");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.SceneType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("SceneTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.SkillGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("SkillGroups");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.TechniqueSkill", b =>
                {
                    b.Property<int>("TechniqueID");

                    b.Property<int>("SkillID");

                    b.HasKey("TechniqueID", "SkillID");

                    b.HasIndex("SkillID");

                    b.ToTable("TechniquesSkills");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.TechniqueSkillGroup", b =>
                {
                    b.Property<int>("TechniqueID");

                    b.Property<int>("SkillGroupID");

                    b.HasKey("TechniqueID", "SkillGroupID");

                    b.HasIndex("SkillGroupID");

                    b.ToTable("TechniqueSkillGroups");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.TechniqueType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("TechniqueTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.WeaponGrip", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DamageModificator");

                    b.Property<int>("DeadlinessModificator");

                    b.Property<int>("Hands");

                    b.Property<int>("NewRangeMax");

                    b.Property<int>("NewRangeMin");

                    b.HasKey("ID");

                    b.ToTable("WeaponGrips");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.WeaponGripsWeapon", b =>
                {
                    b.Property<int>("WeaponID");

                    b.Property<int>("WeaponGripID");

                    b.HasKey("WeaponID", "WeaponGripID");

                    b.HasIndex("WeaponGripID");

                    b.ToTable("WeaponGripsWeapon");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.WeaponType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.RoleClaim", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int?>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<long>("DiscordID");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.Property<bool>("Verbose");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserClaim", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserRole", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("RoleID");

                    b.Property<int?>("ServerID");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("ServerID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("UserID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EmeraldBot.Model.NameAlias", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("ServerID");

                    b.HasKey("ID");

                    b.HasIndex("ServerID");

                    b.ToTable("NameAliases");

                    b.HasDiscriminator<string>("Discriminator").HasValue("NameAlias");
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.DieFace", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DieType")
                        .IsRequired();

                    b.Property<int?>("EmoteID");

                    b.Property<string>("Value")
                        .HasMaxLength(2);

                    b.HasKey("ID");

                    b.HasIndex("EmoteID");

                    b.ToTable("DieFaces");
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.Roll", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacterID");

                    b.Property<long>("DiscordChannelID");

                    b.Property<long>("DiscordMessageID");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<bool>("Locked");

                    b.Property<string>("Log");

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int>("PlayerID");

                    b.Property<int?>("RingID");

                    b.Property<int>("ServerID");

                    b.Property<int?>("SkillID");

                    b.Property<int>("TN");

                    b.Property<int?>("TechniqueID");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("RingID");

                    b.HasIndex("ServerID");

                    b.HasIndex("SkillID");

                    b.HasIndex("TechniqueID");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.RollDie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Exploded");

                    b.Property<int?>("FaceID");

                    b.Property<int?>("RollID");

                    b.HasKey("ID");

                    b.HasIndex("FaceID");

                    b.HasIndex("RollID");

                    b.ToTable("RollDie");
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.DefaultCharacter", b =>
                {
                    b.Property<int>("ServerID");

                    b.Property<int>("PlayerID");

                    b.Property<int?>("CharacterID");

                    b.HasKey("ServerID", "PlayerID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("PlayerID");

                    b.ToTable("DefaultCharacter");
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.Emote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("ServerID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("ID");

                    b.HasIndex("ServerID");

                    b.ToTable("Emotes");
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CharacterID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Data");

                    b.Property<long>("DiscordChannelID");

                    b.Property<long>("DiscordMessageID");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<int?>("PlayerID");

                    b.Property<int?>("ServerID");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("ServerID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.PrivateChannel", b =>
                {
                    b.Property<int>("PlayerID");

                    b.Property<int>("ServerID");

                    b.Property<long>("ChannelDiscordID");

                    b.HasKey("PlayerID", "ServerID");

                    b.HasIndex("ServerID");

                    b.ToTable("PrivateChannels");
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.Server", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DiceChannelID");

                    b.Property<long>("DiscordID");

                    b.Property<string>("Name");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("ID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("EmeraldBot.Model.Source", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Book")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("Page");

                    b.HasKey("ID");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.HasKey("UserId");

                    b.ToTable("IdentityUserLogin<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.ToTable("IdentityUserToken<string>");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.Character", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<int>("Composure");

                    b.Property<string>("Description");

                    b.Property<int>("Endurance");

                    b.Property<int>("Fatigue");

                    b.Property<int>("Focus");

                    b.Property<string>("Icon");

                    b.Property<int>("Strife");

                    b.Property<int>("Vigilance");

                    b.ToTable("Characters");

                    b.HasDiscriminator().HasValue("Character");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.Condition", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<string>("Description")
                        .HasColumnName("Condition_Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Effect");

                    b.Property<string>("RemovedWhen");

                    b.ToTable("Conditions");

                    b.HasDiscriminator().HasValue("Condition");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Advantage", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<int?>("AdvantageClassID");

                    b.Property<string>("PermanentEffect")
                        .HasMaxLength(1024);

                    b.Property<int?>("RingID");

                    b.Property<string>("RollEffect")
                        .HasMaxLength(1024);

                    b.Property<int?>("SourceID")
                        .HasColumnName("Advantage_SourceID");

                    b.HasIndex("AdvantageClassID");

                    b.HasIndex("RingID");

                    b.HasIndex("SourceID");

                    b.ToTable("Advantages");

                    b.HasDiscriminator().HasValue("Advantage");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Gear", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<string>("Description")
                        .HasColumnName("Gear_Description")
                        .HasMaxLength(1024);

                    b.Property<int?>("SourceID")
                        .HasColumnName("Gear_SourceID");

                    b.HasIndex("SourceID");

                    b.ToTable("Gear");

                    b.HasDiscriminator().HasValue("Gear");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Skill", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<int>("GroupID");

                    b.Property<int?>("SourceID")
                        .HasColumnName("Skill_SourceID");

                    b.HasIndex("GroupID");

                    b.HasIndex("SourceID");

                    b.ToTable("Skills");

                    b.HasDiscriminator().HasValue("Skill");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Technique", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.NameAlias");

                    b.Property<string>("Activation");

                    b.Property<string>("Effect")
                        .HasColumnName("Technique_Effect");

                    b.Property<int>("Rank")
                        .HasColumnName("Technique_Rank");

                    b.Property<int?>("RingID")
                        .HasColumnName("Technique_RingID");

                    b.Property<int?>("SourceID")
                        .HasColumnName("Technique_SourceID");

                    b.Property<int>("TN");

                    b.Property<int?>("TypeID");

                    b.HasIndex("RingID");

                    b.HasIndex("SourceID");

                    b.HasIndex("TypeID");

                    b.ToTable("Techniques");

                    b.HasDiscriminator().HasValue("Technique");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.NPC", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.Characters.Character");

                    b.Property<string>("Ability");

                    b.Property<int?>("DemeanorID");

                    b.Property<int>("Glory");

                    b.Property<int>("Honour");

                    b.Property<int?>("NPCTypeID");

                    b.Property<int?>("SourceID");

                    b.Property<int>("Status");

                    b.HasIndex("DemeanorID");

                    b.HasIndex("NPCTypeID");

                    b.HasIndex("SourceID");

                    b.ToTable("NonPlayerCharacters");

                    b.HasDiscriminator().HasValue("NPC");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PC", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.Characters.Character");

                    b.Property<int>("Age");

                    b.Property<int?>("ClanID");

                    b.Property<int>("CurrentVoid");

                    b.Property<string>("Family");

                    b.Property<string>("Giri")
                        .HasMaxLength(256);

                    b.Property<string>("Ninjo")
                        .HasMaxLength(256);

                    b.Property<int?>("PlayerID");

                    b.Property<int>("Rank");

                    b.Property<string>("School");

                    b.HasIndex("ClanID");

                    b.HasIndex("PlayerID");

                    b.ToTable("PlayerCharacters");

                    b.HasDiscriminator().HasValue("PC");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Armour", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.Game.Gear");

                    b.Property<int>("Physical");

                    b.Property<int>("Spiritual");

                    b.ToTable("Armours");

                    b.HasDiscriminator().HasValue("Armour");
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Weapon", b =>
                {
                    b.HasBaseType("EmeraldBot.Model.Game.Gear");

                    b.Property<int>("Damage");

                    b.Property<int>("Deadliness");

                    b.Property<int>("RangeMax");

                    b.Property<int>("RangeMin");

                    b.Property<int>("WeaponTypeID");

                    b.HasIndex("WeaponTypeID");

                    b.ToTable("Weapons");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.CharacterCondition", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany("Conditions")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Characters.Condition", "Condition")
                        .WithMany("Characters")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.CharacterRing", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany("Rings")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Ring", "Ring")
                        .WithMany("Characters")
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.JournalEntry", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.JournalType", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Characters.PC", null)
                        .WithMany("JournalEntries")
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.NPCSkillGroup", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.NPC", "NPC")
                        .WithMany("SkillGroups")
                        .HasForeignKey("NPCID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.SkillGroup", "SkillGroup")
                        .WithMany()
                        .HasForeignKey("SkillGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCAdvantage", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Advantage", "Advantage")
                        .WithMany("Characters")
                        .HasForeignKey("AdvantageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Characters.PC", null)
                        .WithMany("Advantages")
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCSkill", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.PC", "PC")
                        .WithMany("Skills")
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Skill", "Skill")
                        .WithMany("Characters")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PCTechnique", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Characters.PC", null)
                        .WithMany("Techniques")
                        .HasForeignKey("PCID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Technique")
                        .WithMany("PCs")
                        .HasForeignKey("TechniqueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ActionScenes", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.SceneType", "SceneType")
                        .WithMany("Actions")
                        .HasForeignKey("SceneTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ActionTypeAction", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Action", "Action")
                        .WithMany("Types")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.AdvantageTypeAdvantages", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Advantage", "Advantage")
                        .WithMany("AdvantageTypes")
                        .HasForeignKey("AdvantageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.AdvantageType", "AdvantageType")
                        .WithMany("Advantages")
                        .HasForeignKey("AdvantageTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.ConflictAction", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Action", "Action")
                        .WithMany("Conflicts")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.ConflictType", "Conflict")
                        .WithMany("Actions")
                        .HasForeignKey("ConflictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.GearQualitiesGear", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Gear", "Gear")
                        .WithMany("GearQualities")
                        .HasForeignKey("GearID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.GearQuality", "GearQuality")
                        .WithMany("GearItems")
                        .HasForeignKey("GearQualityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.GearQuality", b =>
                {
                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Opportunity", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Ring", null)
                        .WithMany("Opportunities")
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.OpportunityTrigger", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.Ring", "Ring")
                        .WithMany()
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.SceneType", "SceneType")
                        .WithMany()
                        .HasForeignKey("SceneTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.SkillGroup", "SkillGroup")
                        .WithMany()
                        .HasForeignKey("SkillGroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.TechniqueType", "TechniqueType")
                        .WithMany()
                        .HasForeignKey("TechniqueTypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.OpportunityTriggerOpportunity", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Opportunity", "Opportunity")
                        .WithMany("Triggers")
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.OpportunityTrigger", "OpportunityTrigger")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityTriggerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.TechniqueSkill", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Skill", "Skill")
                        .WithMany("Techniques")
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Technique")
                        .WithMany("Skills")
                        .HasForeignKey("TechniqueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.TechniqueSkillGroup", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.SkillGroup", "SkillGroup")
                        .WithMany("Techniques")
                        .HasForeignKey("SkillGroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Technique")
                        .WithMany("SkillGroups")
                        .HasForeignKey("TechniqueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.WeaponGripsWeapon", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.WeaponGrip", "WeaponGrip")
                        .WithMany("Weapons")
                        .HasForeignKey("WeaponGripID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Weapon", "Weapon")
                        .WithMany("WeaponGrips")
                        .HasForeignKey("WeaponID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.RoleClaim", b =>
                {
                    b.HasOne("EmeraldBot.Model.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserClaim", b =>
                {
                    b.HasOne("EmeraldBot.Model.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserRole", b =>
                {
                    b.HasOne("EmeraldBot.Model.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Identity.UserToken", b =>
                {
                    b.HasOne("EmeraldBot.Model.Identity.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.NameAlias", b =>
                {
                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany("NameAliases")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.DieFace", b =>
                {
                    b.HasOne("EmeraldBot.Model.Servers.Emote", "Emote")
                        .WithMany("DieFaces")
                        .HasForeignKey("EmoteID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.Roll", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany("Rolls")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Identity.User", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Ring", "Ring")
                        .WithMany()
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany("Rolls")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Game.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.Technique", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Rolls.RollDie", b =>
                {
                    b.HasOne("EmeraldBot.Model.Rolls.DieFace", "Face")
                        .WithMany()
                        .HasForeignKey("FaceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Rolls.Roll", "Roll")
                        .WithMany("Dice")
                        .HasForeignKey("RollID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.DefaultCharacter", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Identity.User", "Player")
                        .WithMany("DefaultCharacters")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany("DefaultCharacters")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.Emote", b =>
                {
                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.Message", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.PC", "Character")
                        .WithMany("Messages")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Identity.User", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Servers.PrivateChannel", b =>
                {
                    b.HasOne("EmeraldBot.Model.Identity.User", "Player")
                        .WithMany("PrivateChannels")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Servers.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Advantage", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.AdvantageClass", "AdvantageClass")
                        .WithMany()
                        .HasForeignKey("AdvantageClassID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.Ring", "Ring")
                        .WithMany("Advantages")
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Gear", b =>
                {
                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Skill", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.SkillGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Technique", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Ring", "Ring")
                        .WithMany("Techniques")
                        .HasForeignKey("RingID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Game.TechniqueType", "Type")
                        .WithMany("Techniques")
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.NPC", b =>
                {
                    b.HasOne("EmeraldBot.Model.Characters.Demeanor", "Demeanor")
                        .WithMany()
                        .HasForeignKey("DemeanorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Characters.NPCType", "NPCType")
                        .WithMany()
                        .HasForeignKey("NPCTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Characters.PC", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.Clan", "Clan")
                        .WithMany("PCs")
                        .HasForeignKey("ClanID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmeraldBot.Model.Identity.User", "Player")
                        .WithMany("Characters")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("EmeraldBot.Model.Game.Weapon", b =>
                {
                    b.HasOne("EmeraldBot.Model.Game.WeaponType", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
