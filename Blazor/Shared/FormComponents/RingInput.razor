@using EmeraldBot.Model.Characters

<Container style="width: 300px;">
    <Row>
        <BlazorCol></BlazorCol>
        <BlazorCol style="position: relative;">
            <BlazorStrap.Image Alignment="Alignment.Right" src="img/Earth.png" style="width: 72px; height: 72px;" />
            <input type="number" min="1" max="9" value="@_rings["Earth"]" style="width: 30px; position: absolute; left: 65px; top: 50px; z-index: 10;" />
        </BlazorCol>
        <BlazorCol style="position: relative;">
            <BlazorStrap.Image Alignment="Alignment.Left" src="img/Air.png" style="width: 72px; height: 72px;" />
            <input type="number" min="1" max="9" value="@_rings["Air"]" style="width: 30px; position: absolute; left: 5px; top: 50px; z-index: 10;" />
        </BlazorCol>
        <BlazorCol></BlazorCol>
    </Row>
    <Row>
        <BlazorCol style="position: relative;">
            <BlazorStrap.Image Alignment="Alignment.Center" src="img/Fire.png" style="width: 72px; height: 72px;" />
            <input type="number" min="1" max="9" value="@_rings["Fire"]" style="width: 30px; position: absolute; left: 85px; top: 30px; z-index: 10;" />
        </BlazorCol>
        <BlazorCol style="position: relative;">
            <BlazorStrap.Image Alignment="Alignment.Center" src="img/Water.png" style="width: 72px; height: 72px;" />
            <input type="number" min="1" max="9" value="@_rings["Water"]" style="width: 30px; position: absolute; left: 35px; top: 30px; z-index: 10;" />
        </BlazorCol>
    </Row>
    <Row>
        <BlazorCol style="position: relative;">
            <BlazorStrap.Image Alignment="Alignment.Center" src="img/void.png" style="width: 72px; height: 72px;" />
            <input type="number" min="1" max="9" value="@_rings["Void"]" style="width: 30px; position: absolute; left: 135px; top: -10px; z-index: 10;" />
        </BlazorCol>
    </Row>
</Container>

@code {
[Parameter] private EventCallback<ICollection<CharacterRing>> RingsChanged { get; set; }
[Parameter] private ICollection<CharacterRing> Rings { get; set; }
private Dictionary<string, string> _rings = new Dictionary<string, string>();

protected override void OnInit()
{
    _rings = Rings.ToDictionary(x => x.Ring.Name, x => $"{x.Value}");
}

private async Task Changed()
{
    foreach (var kv in _rings)
        Rings.SingleOrDefault(x => x.Ring.Name.Equals(kv.Key)).Value = int.Parse(kv.Value);
    await RingsChanged.InvokeAsync(Rings);
}

}