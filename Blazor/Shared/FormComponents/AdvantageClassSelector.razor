@using EmeraldBot.Model
@using EmeraldBot.Model.Game

@inject EmeraldBotContext _ctx

<FormGroup>
    <BlazorLabel For="ClassSelector">Advantage Class</BlazorLabel>
    <Dropdown Id="ClassSelector" IsOpen="@IsOpen">
        <DropdownToggle @onclick="@((e) => { IsOpen = !IsOpen; StateHasChanged(); })">@(_classes.Count > 0 ? _classes.Find(x => x.ID == ClassID).Name : "Loading...")</DropdownToggle>
        <DropdownMenu IsOpen="@IsOpen">
            @foreach (var c in _classes)
            {
                <DropdownItem @key="@c.ID" @onclick="@((e) => ClassSelected(c.ID))">@c.Name</DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
</FormGroup>

@code  {
    [Parameter] private EventCallback<int> ClassIDChanged { get; set; }
    [Parameter] private int ClassID { get; set; }
    private bool IsOpen = false;
    private List<AdvantageClass> _classes = new List<AdvantageClass>();

    protected override async Task OnInitAsync()
    {
        _classes = _ctx.AdvantageClasses.OrderBy(x => x.Name).ToList();
        if (ClassID <= 0)
        {
            ClassID = _classes[0].ID;
            await ClassIDChanged.InvokeAsync(ClassID);
        }
    }

    protected async Task ClassSelected(int newSelection)
    {
        if (newSelection != ClassID)
        {
            ClassID = newSelection;
            await ClassIDChanged.InvokeAsync(ClassID);
        }
        IsOpen = false;
    }
}
