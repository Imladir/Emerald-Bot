@using EmeraldBot.Model
@using EmeraldBot.Model.Servers
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.DependencyInjection;
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Http.Connections;

@inject EmeraldBotContext _ctx
@inject IHttpContextAccessor _ca

<FormGroup>
    <BlazorLabel For="ServerSelector">Server</BlazorLabel>
    <Dropdown Id="ServerSelector" IsOpen="@IsOpen">
        <DropdownToggle @onclick="@OnClick">@(Servers.Count > 0 ? Servers.Find(x => x.ID == ServerID).Name : "Loading...")</DropdownToggle>
        <DropdownMenu IsOpen="@IsOpen">
            @foreach (var s in Servers)
            {
                <DropdownItem @key="@s.ID" @onclick="@((e) => Selection(s.ID))">@s.Name</DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
</FormGroup>

@code  {
[CascadingParameter(Name = "UserID")] protected int UserID { get; set; }
[Parameter] private int ServerID { get; set; }
[Parameter] private EventCallback<int> ServerIDChanged { get; set; }
[Parameter] private bool IncludeAdmin { get; set; } = false;
private bool IsOpen;
private List<Server> Servers = new List<Server>();

protected override async Task OnInitAsync()
{
    if (UserID == -1) return;
    // Create the connection
    HubConnection connection = new HubConnectionBuilder()
            .AddMessagePackProtocol()
            .WithAutomaticReconnect()
            .WithUrl(Urls.BotHub,
            opt =>
            {
                opt.Transports = HttpTransportType.WebSockets;
            })
            .Build();
    await connection.StartAsync();

    // Find the servers the user is on
    List<int> ids = await connection.InvokeAsync<List<int>>("GetUserGuilds", UserID);
    await connection.StopAsync();
    Servers = ids.Select(x => _ctx.Servers.Find(x)).ToList();

    if (IncludeAdmin && _ctx.UserRoles.SingleOrDefault(x => x.Role.Name.Equals("Admin") && x.User.ID == UserID) != null)
        Servers.Insert(0, _ctx.Servers.Single(x => x.DiscordID == 0));

    if (ServerID <= 0)
    {
        ServerID = Servers[0].ID;
        await ServerIDChanged.InvokeAsync(ServerID);
    }
}

protected async Task Selection(int newSelection)
{
    if (newSelection != ServerID)
    {
        ServerID = newSelection;
        await ServerIDChanged.InvokeAsync(ServerID);
    }
    IsOpen = false;
}

private void OnClick(UIMouseEventArgs e)
{
    IsOpen = !IsOpen;
    StateHasChanged();
}
}